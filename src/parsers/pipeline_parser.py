import config as conf
from src.parsers.simple_parser import simple_parser

def pipeline_parser():
    parser = simple_parser() 

    ### STEPS ###
    parser.add_argument(
        "--steps", 
        type=list,
        default=conf.PIPELINE_STEPS_TO_PERFORM,
        help="List of pipeline steps to perform"
    )

    ### DATA ###
    # NA

    ### PREPARING ###
    # NA

    ### TEXT TO TAB ###
    # TODO: NB most of these arguments are set in conf and not used as arguments to parse but could be used
    # with a parser 
    parser.add_argument(
        "--text2tab-model", 
        type=str,
        default=conf.SDG_MODEL,
        help="Name of model to use to transform text (prompt) to tabular data"
    )

    parser.add_argument(
        "--prompt-id", 
        type=str,
        default=conf.PROMPT_ID,
        help="Name of model to use to transform text (prompt) to tabular data"
    )

    parser.add_argument(
        "--n-rows", 
        type=int,
        default=conf.N_ROWS,
        help="Number of rows to generate for one prompt iteration"
    )

    parser.add_argument(
        "--n-sample", 
        type=int,
        default=conf.N_SAMPLE,
        help="Number of patient's to sample"
    )

    ### TAB TO TAB ###
    parser.add_argument(
        "--real-dataset",
        required=False,
        help="Name of real dataset to train tab-to-tab SDG model on"
    )
    
    parser.add_argument(
        "--synth-dataset",
        required=False,
        help="Name of synth dataset generated by SDG model on"
    )
    
    parser.add_argument(
        "--test-dataset",
        required=False,
        help="Name of test dataset to evaluate SDG model on"
    )
    
    ### SYNTH DATA DESCRIPTION ###
    # NA

    ### EVALUATION ###
    parser.add_argument(
        "--log-mlflow",
        type=bool,
        default=True,
        help="Whether to log experiment results to mlflow",
    )
    
    return parser

def pipeline_mlflow_parser():
    
    parser = pipeline_parser() 

    ### EXPERIMENT ###
    parser.add_argument(
        "--exp-name",
        type=str,
        default=conf.MLFLOW_EXPERIMENT_NAME,
        help="Name of the experiment to log to mlflow",
    )
    
    parser.add_argument(
        "--run-name",
        type=str,
        default="run_test",
        help="Name of the run name to log to mlflow",
    )

    return parser



